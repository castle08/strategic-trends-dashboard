{
  "name": "test_v5_with_images",
  "nodes": [
    {
      "parameters": {
        "numberInputs": 5
      },
      "id": "b577d701-a7fb-4e6c-8887-b5940a7afca1",
      "name": "Merge RSS Sources",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        224,
        336
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process Articles for Strategic Trend Analysis\n\nconst TZ = 'Europe/London';\nconst MIN_TITLE_LEN = 10;\nconst MIN_SUMMARY_LEN = 30;\nconst MAX_ITEMS = 100;\nconst LOOKBACK_DAYS = 7;\n\nconst BRAND_TAGS = ['retail','sportswear','energy drinks'];\nconst REGION = 'UK';\nconst LIMITS = { max_items: 20, min_confidence: 40 };\n\nfunction stripHtml(s='') {\n  return (s || '')\n    .replace(/<script[\\s\\S]*?<\\/script>/gi, '')\n    .replace(/<style[\\s\\S]*?<\\/style>/gi, '')\n    .replace(/<[^>]+>/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\nfunction hostFromUrl(u='') { try { return new URL(u).hostname.replace(/^www\\./,''); } catch { return ''; } }\nfunction toISO(d) {\n  if (!d) return null;\n  const tryDates = Array.isArray(d) ? d : [d];\n  for (const raw of tryDates) {\n    const t = raw ? Date.parse(raw) : NaN;\n    if (!Number.isNaN(t)) return new Date(t).toISOString();\n  }\n  return null;\n}\nfunction withinLookback(iso) {\n  if (!iso) return false;\n  const now = new Date();\n  const then = new Date(now); then.setDate(now.getDate() - LOOKBACK_DAYS);\n  return new Date(iso) >= then;\n}\nfunction normTitle(s='') { return s.toLowerCase().replace(/\\s+/g,' ').trim(); }\n\nconst inputItems = $input.all();\n\n// Flatten RSS outputs\nlet raw = [];\nfor (const it of inputItems) {\n  if (Array.isArray(it.json?.items)) raw = raw.concat(it.json.items);\n  else raw.push(it.json);\n}\n\n// Normalize articles for trend analysis\nconst normalised = [];\nfor (const r of raw) {\n  const title = (r.title || r.headline || '').trim();\n  const url = (r.link || r.url || r.guid || '').trim();\n  const summary = stripHtml(r.description || r.contentSnippet || r.summary || r.content || '');\n  const publishedAt = toISO([r.isoDate, r.pubDate, r.published, r.updated, r.date]) || new Date().toISOString();\n  \n  // Simplified source detection for trend context\n  let source = 'Market Intelligence';\n  const host = hostFromUrl(url);\n  if (host.includes('adweek')) source = 'Adweek';\n  else if (host.includes('campaignlive')) source = 'Campaign';\n  else if (host.includes('reddit.com')) source = 'Reddit';\n\n  if (title.length < MIN_TITLE_LEN) continue;\n  if (summary.length < MIN_SUMMARY_LEN) continue;\n  if (!withinLookback(publishedAt)) continue;\n\n  normalised.push({ title, summary, source, publishedAt });\n}\n\n// Dedupe by title similarity\nconst seenTitles = new Set(); const deduped = [];\nfor (const it of normalised) {\n  const key = normTitle(it.title);\n  if (seenTitles.has(key)) continue;\n  seenTitles.add(key);\n  deduped.push(it);\n}\n\n// Sort and limit\ndeduped.sort((a,b) => new Date(b.publishedAt) - new Date(a.publishedAt));\nconst items = deduped.slice(0, MAX_ITEMS);\n\nconsole.log(`📊 Processing ${items.length} articles for strategic trend extraction`);\nconsole.log(`🎯 Target: Extract ${LIMITS.max_items} strategic trends for advertising agencies`);\n\n// Create analysis summary for agent\nconst articleSummary = items.map(item => `\"${item.title}\" - ${item.summary.substring(0, 200)}...`).join('\\n\\n');\n\nreturn [{\n  json: {\n    articleSummary,\n    articleCount: items.length,\n    sources: [...new Set(items.map(i => i.source))],\n    brand_tags: BRAND_TAGS,\n    region: REGION,\n    limits: LIMITS\n  }\n}];"
      },
      "id": "b0238937-31d3-495d-a9f3-0b30a5789587",
      "name": "Process Articles",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        384
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "91a0d271-defe-47df-801d-d7ecd401862d",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        704,
        608
      ],
      "credentials": {
        "openAiApi": {
          "id": "EJ4bHf6JFSTiAvix",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\"trends\", \"generatedAt\", \"sourceSummary\"],\n  \"properties\": {\n    \"generatedAt\": { \"type\": \"string\" },\n    \"sourceSummary\": {\n      \"type\": \"object\",\n      \"required\": [\"totalFetched\", \"afterCluster\", \"sources\"],\n      \"properties\": {\n        \"totalFetched\": { \"type\": \"number\" },\n        \"afterCluster\": { \"type\": \"number\" },\n        \"sources\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n      }\n    },\n    \"trends\": {\n      \"type\": \"array\",\n      \"minItems\": 10,\n      \"maxItems\": 20,\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"id\", \"title\", \"summary\", \"category\", \"scores\", \"viz\", \"whyItMatters\", \"tags\", \"brandAngles\", \"exampleUseCases\", \"creative\"],\n        \"properties\": {\n          \"id\": { \"type\": \"string\" },\n          \"title\": { \"type\": \"string\" },\n          \"summary\": { \"type\": \"string\" },\n          \"category\": { \"type\": \"string\" },\n          \"tags\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n          \"scores\": {\n            \"type\": \"object\",\n            \"required\": [\"novelty\", \"velocity\", \"relevance\", \"confidence\", \"total\"],\n            \"properties\": {\n              \"novelty\": { \"type\": \"integer\", \"minimum\": 1, \"maximum\": 100 },\n              \"velocity\": { \"type\": \"integer\", \"minimum\": 1, \"maximum\": 100 },\n              \"relevance\": { \"type\": \"integer\", \"minimum\": 1, \"maximum\": 100 },\n              \"confidence\": { \"type\": \"integer\", \"minimum\": 1, \"maximum\": 100 },\n              \"total\": { \"type\": \"integer\", \"minimum\": 1, \"maximum\": 100 }\n            }\n          },\n          \"whyItMatters\": { \"type\": \"string\" },\n          \"brandAngles\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n          \"exampleUseCases\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n          \"creative\": {\n            \"type\": \"object\",\n            \"required\": [\"shortCardCopy\", \"imagePrompt\", \"altText\", \"podcastSnippet\"],\n            \"properties\": {\n              \"shortCardCopy\": { \"type\": \"string\", \"maxLength\": 140 },\n              \"imagePrompt\": { \"type\": \"string\"},\n              \"altText\": { \"type\": \"string\" },\n              \"podcastSnippet\": { \"type\": \"string\" }\n            }\n          },\n          \"viz\": {\n            \"type\": \"object\",\n            \"required\": [\"size\", \"intensity\", \"colorHint\"],\n            \"properties\": {\n              \"size\": { \"type\": \"number\" },\n              \"intensity\": { \"type\": \"number\" },\n              \"colorHint\": { \"type\": \"string\" }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
      },
      "id": "a8b07769-efce-4ef1-ae72-ad14410bf46e",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1,
      "position": [
        832,
        608
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are TrendMaker, a strategic trend analyst for advertising agencies. \n\nAnalyze these {{ $json.articleCount }} recent marketing articles and extract strategic trends:\n\n{{ $json.articleSummary }}\n\nYour job is to identify strategic market trends that will help advertising agencies win business and serve clients better. \n\n**Generate exactly 10-15 strategic trends** - not article summaries, but broader market movements and transformations.\n\nEach trend should:\n- Have a strategic trend title (e.g., \"AI-Powered Creative Automation Reaches Mass Adoption\")\n- Focus on industry transformations, not individual company news\n- Help agencies understand where the market is heading\n- Be scored 1-100 on novelty, velocity, relevance, and confidence",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are TrendMaker, a strategic trend analyst. Your job is to identify broader market trends from articles, NOT summarize individual articles.\n\n### CRITICAL: Create Strategic Trends, Not Article Summaries\n- Analyze patterns across articles to identify strategic market movements\n- Create trend titles that capture broader transformations (e.g. \"Privacy-First Marketing Becomes Competitive Advantage\")\n- Focus on what these articles collectively tell us about where the industry is heading\n- Generate insights that help agencies anticipate market changes\n\n### Requirements:\n- Generate EXACTLY 10-15 strategic trends (minimum 10)\n- All scores must be integers 1-100\n- Each trend represents a strategic market movement, not an individual article\n- Trends should help agencies win business and serve clients better\n- No URLs needed - these are strategic insights, not article links\n\n### Scoring (1-100):\n- novelty: How new is this trend vs established practice\n- velocity: How fast is this trend gaining momentum  \n- relevance: How much will this impact advertising agencies\n- confidence: How certain are we this trend is real\n- total: weighted average\n\n### Categories: \nTechnology, Media, Culture, Retail, AI, Consumer Behaviour, Creativity, Regulation, Data & Privacy, Sustainability\n\n### Trend Examples:\n- \"Retail Media Networks Challenge Traditional Display Advertising\"\n- \"Creator Economy Professionalizes Into Enterprise Marketing Channel\"\n- \"AI Content Generation Forces Creative Industry Restructuring\"\n\nReturn ONLY valid JSON matching the schema."
        }
      },
      "id": "e39c1aa6-1b28-46b7-927b-8261dd187ac4",
      "name": "Strategic Trend Analyzer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        672,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Finalize strategic trends for visualization\n\nconst data = $json;\nconst trends = Array.isArray(data.trends) ? data.trends : [];\n\n// Ensure minimum trend count\nif (trends.length < 10) {\n  throw new Error(`Only ${trends.length} trends generated. Minimum required: 10`);\n}\n\n// Fix sourceSummary structure\nif (!data.sourceSummary || !Array.isArray(data.sourceSummary.sources)) {\n  data.sourceSummary = {\n    totalFetched: trends.length,\n    afterCluster: trends.length,\n    sources: ['Strategic Market Intelligence']\n  };\n}\n\n// Enhanced viz properties for strategic trends\nfor (let i = 0; i < trends.length; i++) {\n  const trend = trends[i];\n  \n  if (trend.scores) {\n    const totalScore = trend.scores.total || 50;\n    const velocity = trend.scores.velocity || 50;\n    const novelty = trend.scores.novelty || 50;\n    \n    // Enhanced size mapping (10-20 for strategic importance)\n    trend.viz = trend.viz || {};\n    trend.viz.size = Math.max(10, Math.min(20, Math.round(10 + (totalScore / 100) * 10)));\n    \n    // Enhanced intensity based on velocity + novelty\n    const intensityScore = (velocity + novelty) / 2;\n    trend.viz.intensity = Number((1.2 + (intensityScore / 100) * 1.8).toFixed(2));\n    \n    // Strategic category colors\n    const cat = (trend.category || 'Technology').toLowerCase();\n    let hue;\n    switch(cat) {\n      case 'technology': case 'ai': hue = 240; break; // Blue\n      case 'media': case 'culture': hue = 300; break; // Purple  \n      case 'retail': case 'consumer behaviour': hue = 120; break; // Green\n      case 'creativity': hue = 60; break; // Yellow\n      case 'regulation': case 'data & privacy': hue = 0; break; // Red\n      case 'sustainability': hue = 150; break; // Teal\n      default: hue = 210; // Default blue\n    }\n    trend.viz.colorHint = `hsl(${hue}, 80%, 50%)`;\n    \n    // Add unique trend ID if missing\n    if (!trend.id) {\n      trend.id = `trend_${i + 1}_${Date.now().toString().slice(-4)}`;\n    }\n  }\n}\n\ndata.generatedAt = data.generatedAt || new Date().toISOString();\n\n// Strategic logging\nconsole.log(`🎯 Generated ${trends.length} strategic trends for agency intelligence`);\nconst scoreRange = trends.map(t => t.scores?.total || 0);\nconst minScore = Math.min(...scoreRange);\nconst maxScore = Math.max(...scoreRange);\nconsole.log(`📊 Strategic Impact Range: ${minScore}-${maxScore}`);\nconsole.log(`🔍 Categories: ${[...new Set(trends.map(t => t.category))].join(', ')}`);\n\ntrends.slice(0, 5).forEach((trend, i) => {\n  console.log(`${i+1}. \"${trend.title}\" (${trend.category}) - Impact: ${trend.scores?.total}`);\n});\n\nreturn [{ json: data }];"
      },
      "id": "9152b49b-f25e-4620-9477-1f3aa8cd34ad",
      "name": "Finalize Trends",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate 3D-style images for each trend using OpenAI's image API\n// This node should be inserted between \"Finalize Trends\" and \"Update Live Dashboard\"\n\nconst OPENAI_API_KEY = $env.OPENAI_API_KEY;\nconst OPENAI_API_URL = 'https://api.openai.com/v1/images/generations';\n\n// Image generation configuration\nconst IMAGE_CONFIG = {\n  model: 'dall-e-3',\n  size: '1024x1024',\n  quality: 'standard',\n  style: 'vivid',\n  format: 'png'\n};\n\n// Generate image prompt for a trend\nfunction generateImagePrompt(trend) {\n  const { title, category, creative } = trend;\n  \n  // Use existing imagePrompt if available, otherwise generate one\n  let basePrompt = creative?.imagePrompt || `A 3D visualization representing \"${title}\" in the ${category} category`;\n  \n  // Enhanced prompt template based on imageprompt.md requirements\n  const enhancedPrompt = `Create a hyper-detailed 3D render of ${basePrompt}.\n  \n  • Perspective: Slightly angled from above, showing depth and dimension.\n  • Primary color tone: Use colors that complement the ${category} theme prominently in lighting, accents, and key elements.\n  • Details: Include realistic textures, materials, and lighting that represent the trend concept.\n  • Symbolism: Incorporate visual metaphors that clearly represent \"${title}\" and its significance in ${category}.\n  • Lighting: Studio-quality lighting with soft shadows and realistic reflections.\n  • Style: Realistic yet slightly stylized for visual clarity, cinematic depth of field.\n  • Background: Transparent PNG with alpha channel (no sky or scenery).\n  • Format: 1024x1024 PNG with transparent background.`;\n\n  return enhancedPrompt;\n}\n\n// Generate image for a single trend\nasync function generateTrendImage(trend) {\n  try {\n    const prompt = generateImagePrompt(trend);\n    \n    console.log(`🎨 Generating image for: \"${trend.title}\"`);\n    console.log(`📝 Prompt: ${prompt.substring(0, 100)}...`);\n    \n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: IMAGE_CONFIG.model,\n        prompt: prompt,\n        size: IMAGE_CONFIG.size,\n        quality: IMAGE_CONFIG.quality,\n        style: IMAGE_CONFIG.style,\n        response_format: 'url'\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);\n    }\n\n    const data = await response.json();\n    const imageUrl = data.data[0].url;\n    \n    console.log(`✅ Image generated successfully: ${imageUrl}`);\n    \n    return {\n      ...trend,\n      creative: {\n        ...trend.creative,\n        imageUrl: imageUrl\n      }\n    };\n    \n  } catch (error) {\n    console.error(`❌ Failed to generate image for \"${trend.title}\":`, error.message);\n    \n    // Return trend without image URL on failure\n    return {\n      ...trend,\n      creative: {\n        ...trend.creative,\n        imageUrl: null\n      }\n    };\n  }\n}\n\n// Main execution\nasync function processTrends() {\n  const inputData = $json;\n  const trends = Array.isArray(inputData.trends) ? inputData.trends : [];\n  \n  if (trends.length === 0) {\n    console.log('⚠️ No trends to process for image generation');\n    return [{ json: inputData }];\n  }\n  \n  console.log(`🖼️ Starting image generation for ${trends.length} trends...`);\n  \n  // Process trends sequentially to avoid rate limits\n  const processedTrends = [];\n  for (let i = 0; i < trends.length; i++) {\n    const trend = trends[i];\n    console.log(`📊 Processing trend ${i + 1}/${trends.length}: \"${trend.title}\"`);\n    \n    const processedTrend = await generateTrendImage(trend);\n    processedTrends.push(processedTrend);\n    \n    // Rate limiting: wait 1 second between requests\n    if (i < trends.length - 1) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n  \n  // Count successful generations\n  const successfulGenerations = processedTrends.filter(t => t.creative.imageUrl).length;\n  console.log(`🎯 Image generation complete: ${successfulGenerations}/${trends.length} successful`);\n  \n  return [{\n    json: {\n      ...inputData,\n      trends: processedTrends\n    }\n  }];\n}\n\n// Execute the main function\nreturn await processTrends();"
      },
      "id": "image-gen-node-001",
      "name": "Generate Trend Images",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        384
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://strategic-trends-dashboard-standalo.vercel.app/api/trends",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "generatedAt",
              "value": "={{ $json.generatedAt }}"
            },
            {
              "name": "sourceSummary",
              "value": "={{ $json.sourceSummary }}"
            },
            {
              "name": "trends",
              "value": "={{ $json.trends }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": false,
          "timeout": 10000
        }
      },
      "id": "a0d70128-eaf3-4f54-b42b-d6d6ca63e79e",
      "name": "Update Live Dashboard",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1520,
        384
      ],
      "continueOnFail": true,
      "notes": "Posts trends data to live Vercel dashboard API - Both 3D dashboard and screens mode will get updated automatically"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 24
            }
          ]
        }
      },
      "id": "67baaa90-2540-4626-8c8a-ccae1900ac05",
      "name": "Daily Intelligence Update",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -224,
        384
      ]
    },
    {
      "parameters": {
        "url": "https://www.campaignlive.co.uk/rss/news",
        "options": {}
      },
      "id": "e73ac8b3-2b09-4bb3-81b8-e92aebaf362e",
      "name": "campaignlive - news",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://www.campaignlive.co.uk/rss/latest",
        "options": {}
      },
      "id": "20de07a9-4739-4325-a037-7233f79429ff",
      "name": "campaignlive - latest",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        0,
        192
      ]
    },
    {
      "parameters": {
        "url": "https://www.adweek.com/feed/",
        "options": {}
      },
      "id": "adweek-feed-id",
      "name": "adweek",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        0,
        384
      ]
    },
    {
      "parameters": {
        "url": "https://www.reddit.com/r/advertising/.rss",
        "options": {}
      },
      "id": "reddit-advertising-id",
      "name": "reddit - advertising",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        0,
        576
      ]
    },
    {
      "parameters": {
        "url": "https://www.reddit.com/r/marketing/.rss",
        "options": {}
      },
      "id": "reddit-marketing-id",
      "name": "reddit - marketing",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        0,
        768
      ]
    }
  ],
  "connections": {
    "Merge RSS Sources": {
      "main": [
        [
          {
            "node": "Process Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Articles": {
      "main": [
        [
          {
            "node": "Strategic Trend Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Strategic Trend Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Strategic Trend Analyzer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Strategic Trend Analyzer": {
      "main": [
        [
          {
            "node": "Finalize Trends",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Trends": {
      "main": [
        [
          {
            "node": "Generate Trend Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Trend Images": {
      "main": [
        [
          {
            "node": "Update Live Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Intelligence Update": {
      "main": [
        [
          {
            "node": "campaignlive - news",
            "type": "main",
            "index": 0
          },
          {
            "node": "campaignlive - latest",
            "type": "main",
            "index": 0
          },
          {
            "node": "adweek",
            "type": "main",
            "index": 0
          },
          {
            "node": "reddit - advertising",
            "type": "main",
            "index": 0
          },
          {
            "node": "reddit - marketing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ca3f2da5-a2c0-40f4-bc09-4be3547ca9fa",
  "meta": {
    "instanceId": "35da76c3eaa1cbc2ecc4af2ce11b5301cbd1d6edd58a285384cc9e60d637dd8b"
  },
  "id": "asXsSvXAvImzCC9l",
  "tags": []
}
